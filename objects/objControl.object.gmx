<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
enum SimState {
    observe,
    place,
    run
}
globalvar placeables, placeables_indices;
placeables[3,1] = objRobot;
placeables[2,1] = objBox;
placeables[1,1] = objWall;
placeables[0,1] = objDelete;
placeables[3,0] = sprRobotSmall;
placeables[2,0] = sprBox;
placeables[1,0] = sprWall;
placeables[0,0] = sprDelete;
placeables_indices = ds_map_create();
ds_map_add(placeables_indices, objRobot, 3);
ds_map_add(placeables_indices, objBox, 2);
ds_map_add(placeables_indices, objWall, 1);
ds_map_add(placeables_indices, objDelete, 0);

state = SimState.observe;
sim_length = 32 * 60 * 2;
running_length = 0;
show_debug_message("objControl: Create event");

t_get_id = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(placeables_indices);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if (i_d == t_get_id) {
    if (ds_map_find_value(async_load, "status")) {
        show_debug_message("Finding robot's position");
        var t = ds_map_find_value(async_load, "value");
        with (objRobotParticle2) {
            if (step_number == t) {
                sprite_index = sprRobotInverse;
                image_alpha = 1;
            }
            else {
                sprite_index = sprRobotSmall;
                image_alpha = 0.1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw timer and play/pause button
var ccc = draw_get_color();
draw_set_color(c_green);
var play = "||"
if (state == SimState.run) {play = "&gt;";}
draw_text(4, 4, string(running_length / 32) + "/" + string(sim_length / 32) + " " + play);
draw_set_color(ccc);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t_get_id = get_integer_async("Enter step number", 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save current map
// save_data is for saving all the placeable instances
var save_data = buffer_create((6 * instance_number(clsPlaceable)) + 20, buffer_grow, 2);
buffer_write(save_data, buffer_u16, instance_number(clsPlaceable));
with (clsPlaceable) {
    buffer_write(save_data, buffer_u16, ds_map_find_value(placeables_indices, object_index));
    buffer_write(save_data, buffer_s16, self.x);
    buffer_write(save_data, buffer_s16, self.y);
}
buffer_save(save_data, "room_placement.save");
buffer_delete(save_data);

// map_data is the occupancy grid. map_permanence indicates whether each pixel has permanent or temporary occupancy
var map_data = buffer_create((room_width * room_height) + 20, buffer_fast, 1);
var map_permanence = buffer_create((room_width * room_height) + 20, buffer_fast, 1);
var rm_dimensions = string(room_width) + "," + string(room_height);
show_debug_message(rm_dimensions);
var s_i;
for (s_i = 1; s_i &lt;= string_length(rm_dimensions); s_i++) {
    buffer_write(map_data, buffer_u8, string_byte_at(rm_dimensions, s_i));
    show_debug_message(string(string_byte_at(rm_dimensions, s_i)));
}
buffer_write(map_data, buffer_u8, 0);
for (s_i = 1; s_i &lt;= string_length(rm_dimensions); s_i++) {
    buffer_write(map_permanence, buffer_u8, string_byte_at(rm_dimensions, s_i));
}
buffer_write(map_permanence, buffer_u8, 0);
var i, j, inst;
for (j = 0; j &lt; room_height; j++) {
    for (i = 0; i &lt; room_width; i++) {
        inst = instance_position(i, j, clsPlaceable);
        if (inst == noone) {
            buffer_write(map_data, buffer_u8, 0);
            buffer_write(map_permanence, buffer_u8, 0);
        }
        else {
            buffer_write(map_data, buffer_u8, 1);
            with (inst) {
                if (object_index == objWall) {
                    buffer_write(map_permanence, buffer_u8, 1);
                }
                else {
                    buffer_write(map_permanence, buffer_u8, 0);
                }
            }
        }
    }
}
buffer_save(map_data, "occupancy_grid.omap");
buffer_save(map_permanence, "permanence.pmap");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go into placing state
show_debug_message("objControl: P pressed");
show_debug_message("state="+string(state));
if (state == SimState.observe) {
    show_debug_message("About to switch back to place mode");
    state = SimState.place;
    if (!instance_exists(objPlacer)) {
        placer = instance_create(mouse_x, mouse_y, objPlacer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SHIFT+L Load robot particles
if (keyboard_check(vk_shift)) {
    var file, buf, fsize, num_entries, i, fd, inst;
    file = get_open_filename("particle file|*.part","");
    if (file != "") {
        fd = file_bin_open(file, 0);
        fsize = file_bin_size(fd);
        file_bin_close(fd);
        num_entries = floor(fsize / 3 / buffer_sizeof(buffer_f64));
        if (num_entries &gt; 2000) {num_entries = 2000;}
        buf = buffer_load(file);
        for (i = 0; i &lt; num_entries; i++) {
            var rx, ry, rtheta;
            rx = buffer_read(buf, buffer_f64);
            rx = rx % room_width;
            ry = buffer_read(buf, buffer_f64);
            ry = ry % room_height;
            rtheta = buffer_read(buf, buffer_f64);
            show_debug_message("Creating Robot at (" + string(rx) + "," + string(ry) + "," + string(rtheta));
            inst = instance_create(rx, ry, objRobotParticle);
            inst.direction = rtheta;
        }
        buffer_delete(buf);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CTRL + L load robot path
/// SHIFT+L Load robot particles
if (keyboard_check(vk_control)) {
    var file, buf, fsize, num_entries, i, fd, inst;
    file = get_open_filename("state data file|*.data","");
    if (file != "") {
        fd = file_bin_open(file, 0);
        fsize = file_bin_size(fd);
        file_bin_close(fd);
        num_entries = floor(fsize / 3 / buffer_sizeof(buffer_f32));
        if (num_entries &gt; 2000) {num_entries = 2000;}
        buf = buffer_load(file);
        for (i = 0; i &lt; num_entries; i++) {
            var rx, ry, rtheta;
            rx = buffer_read(buf, buffer_f32);
            rx = rx % room_width;
            ry = buffer_read(buf, buffer_f32);
            ry = ry % room_height;
            rtheta = buffer_read(buf, buffer_f32);
            // show_debug_message("Creating Robot at (" + string(rx) + "," + string(ry) + "," + string(rtheta));
            inst = instance_create(rx, ry, objRobotParticle2);
            inst.direction = rtheta;
            inst.step_number = i;
        }
        buffer_delete(buf);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load maps from files
if (!keyboard_check(vk_shift) &amp;&amp; !keyboard_check(vk_control)) {
    var rx, ry, robo_exists;
    robo_exists = 0;
    var save_data = buffer_load("room_placement.save");
    var i = 0, n, obj_n, obj, o_x, o_y;
    n = buffer_read(save_data, buffer_u16);
    for (i = 0; i &lt; n; i++) {
        obj_n = buffer_read(save_data, buffer_u16);
        obj = placeables[obj_n, 1];
        o_x = buffer_read(save_data, buffer_s16);
        o_y = buffer_read(save_data, buffer_s16);
        if (obj == objRobot) {
            robo_exists = 1;
            rx = o_x;
            ry = o_y;
        }
        else {
            instance_create(o_x, o_y, obj);
        }
    }
    if (robo_exists) {
        instance_create(rx, ry, objRobot);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run or stop simulation
if (instance_exists(objRobot)) {
    if (state != SimState.run) {
        if ((state == SimState.place) and (instance_exists(objPlacer))) {
            with (objPlacer) {
                show_debug_message("Deleting placer");
                instance_destroy();
            }
        }
        state = SimState.run;
        running_length = 0;
    }
    else {
        state = SimState.observe;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(ord('Q'))) {
    with (objRobotParticle2) {instance_destroy();}
}
else {
    show_debug_message("objControl: Escape Pressed");
    show_debug_message("state="+string(state)+", objPlacer exists = "+string(instance_exists(objPlacer)));
    if (state == SimState.place || state == SimState.run) {
        if ((state == SimState.place) and (instance_exists(objPlacer))) {
            with (objPlacer) {
                show_debug_message("Deleting placer");
                instance_destroy();
            }
        }
        show_debug_message("About to switch back to observe mode");
        state = SimState.observe;
    }
    
    with (objRobotParticle) {instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
